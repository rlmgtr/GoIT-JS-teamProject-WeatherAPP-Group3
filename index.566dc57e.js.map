{"mappings":"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","sources":["src/fiveDays.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    const defaultCity = 'Balanga';\n    const favoriteCity = localStorage.getItem('favoriteCity') || defaultCity;\n    fetchCurrentWeather(favoriteCity);\n    setFavoriteButtonState(favoriteCity);\n});\n\ndocument.getElementById('searchForm').addEventListener('submit', function(e) {\n    e.preventDefault();\n    const city = document.getElementById('cityInput').value;\n    fetchCurrentWeather(city);\n    fetchWeather(city);\n});\n\ndocument.getElementById('favoriteBtn').addEventListener('click', function() {\n    const city = document.getElementById('cityName').innerText;\n    localStorage.setItem('favoriteCity', city);\n    alert(`${city} has been added to your favorites!`);\n    setFavoriteButtonState(city);\n});\n\ndocument.querySelectorAll('input[name=\"unit\"]').forEach(radio => {\n    radio.addEventListener('change', function() {\n        const city = document.getElementById('cityInput').value || localStorage.getItem('favoriteCity') || 'Balanga';\n        fetchWeather(city);\n    });\n});\n\nfunction setFavoriteButtonState(city) {\n    const favoriteCity = localStorage.getItem('favoriteCity');\n    const favoriteBtn = document.getElementById('favoriteBtn');\n    if (favoriteCity === city) {\n        favoriteBtn.innerText = 'Favorited';\n        favoriteBtn.disabled = true;\n    } else {\n        favoriteBtn.innerText = 'Favorite';\n        favoriteBtn.disabled = false;\n    }\n}\n\nfunction getSelectedUnit() {\n    return document.querySelector('input[name=\"unit\"]:checked').value;\n}\n\nfunction fetchCurrentWeather(city) {\n    const unit = getSelectedUnit();\n    const apiKey = 'f1a7f601f87c9d97579ef8237cc83ff1';\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=${unit}`;\n\n    fetch(apiUrl)\n        .then(response => response.json())\n        .then(data => {\n            const weatherDescription = data.weather[0].description;\n            const temperature = data.main.temp;\n            const icon = data.weather[0].icon;\n            const sunrise = new Date(data.sys.sunrise * 1000).toLocaleTimeString();\n            const sunset = new Date(data.sys.sunset * 1000).toLocaleTimeString();\n            const unitSymbol = unit === 'metric' ? '°C' : '°F';\n\n          const weatherInfo = `\n                <img src=\"https://openweathermap.org/img/wn/${icon}@2x.png\" alt=\"Weather icon\">\n                <p>Weather: ${weatherDescription}</p>\n                <p>Temperature: ${temperature}${unitSymbol}</p>\n                <p>Sunrise | ${sunrise}</p>\n                <p>Sunset | ${sunset}</p>\n            `;\n            document.getElementById('currentforecast').innerHTML = weatherInfo;\n            document.getElementById('cityName').innerText = city;\n\n            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n            const currentDate = new Date().toLocaleDateString(undefined, options);\n            document.getElementById('currentdate').innerText = `Date: ${currentDate}`;\n\n            setFavoriteButtonState(city);\n        })\n        .catch(error => {\n            console.error('Error fetching weather data:', error);\n            document.getElementById('currentforecast').innerText = 'Error fetching weather data';\n            document.getElementById('currentdate').innerText = '';\n        });\n}\n\nfunction fetchWeather(city) {\n    const unit = getSelectedUnit();\n    const apiKey = 'f1a7f601f87c9d97579ef8237cc83ff1';\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${unit}`;\n\n    fetch(apiUrl)\n    .then(response => response.json())\n    .then(data => {\n        const forecast = data.list.reduce((acc, item) => {\n            const date = item.dt_txt.split(' ')[0];\n            if (!acc[date]) {\n                acc[date] = [];\n            }\n            acc[date].push(item);\n            return acc;\n        }, {});\n\n        displayForecast(forecast);\n    })\n    .catch(error => {\n        console.error('Error fetching data:', error);\n    });\n}\n\nfunction displayForecast(forecast) {\n    const forecastContainer = document.getElementById('forecast');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    forecastContainer.innerHTML = '';\n\n    for (const date in forecast) {\n        const dayForecast = forecast[date];\n        const minTemp = Math.min(...dayForecast.map(item => item.main.temp_min));\n        const maxTemp = Math.max(...dayForecast.map(item => item.main.temp_max));\n        const dayElement = document.createElement('div');\n        dayElement.classList.add('day');\n        const iconUrl = `https://openweathermap.org/img/w/${dayForecast[0].weather[0].icon}.png`;\n        dayElement.innerHTML = `\n            <div>${new Date(dayForecast[0].dt * 1000).toDateString()}</div>\n            <img src=\"${iconUrl}\" alt=\"${dayForecast[0].weather[0].description}\">\n            <div>Min Temp: ${minTemp}${unitSymbol}</div>\n            <div>Max Temp: ${maxTemp}${unitSymbol}</div>\n        `;\n        dayElement.addEventListener('click', function() {\n            displayWeatherInfo(dayForecast);\n        });\n        forecastContainer.appendChild(dayElement);\n    }\n}\n\nfunction displayWeatherInfo(weatherData) {\n    const weatherInfoContainer = document.getElementById('weatherInfo');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    weatherInfoContainer.innerHTML = ''};\n\n    weatherData.forEach(item => {\n        const weatherElement = document.createElement('div');\n        const time = new Date(item.dt * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        const temperature = item.main.temp;\n        const description = item.weather[0].description;\n        const clouds = item.clouds.all;\n        const windSpeed = item.wind.speed;\n        const visibility = item.visibility / 1000; // Convert visibility to kilometers\n        const iconUrl = `https://openweathermap.org/img/w/${item.weather[0].icon}.png`});\n\n        weatherElement.innerHTML = `\n            <div>${time}</div>\n            <img src=\"${icon}`\n\n\n"],"names":["_arrayLikeToArray","arr","len","setFavoriteButtonState","city","favoriteCity","localStorage","getItem","favoriteBtn","document","getElementById","innerText","disabled","getSelectedUnit","querySelector","value","fetchCurrentWeather","unit","apiUrl","concat","fetch","then","response","json","data","weatherDescription","weather","description","temperature","main","temp","_$icon","icon","sunrise","Date","sys","toLocaleTimeString","sunset","unitSymbol","weatherInfo","innerHTML","currentDate","toLocaleDateString","undefined","weekday","year","month","day","catch","error","console","fetchWeather","displayForecast","list","reduce","acc","item","date","dt_txt","split","push","forecast","_Math","_Math1","dayForecast","minTemp","Math","min","apply","_toConsumableArray","map","temp_min","maxTemp","max","temp_max","dayElement","createElement","classList","add","iconUrl","dt","toDateString","addEventListener","displayWeatherInfo","forecastContainer","appendChild","_loop","weatherData","weatherInfoContainer","e","preventDefault","setItem","alert","querySelectorAll","forEach","radio","hour","minute","clouds","all","wind","speed","visibility","weatherElement","time"],"version":3,"file":"index.566dc57e.js.map"}