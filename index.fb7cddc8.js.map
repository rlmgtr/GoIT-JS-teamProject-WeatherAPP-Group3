{"mappings":"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","sources":["src/chart.js"],"sourcesContent":["document.getElementById('searchForm').addEventListener('submit', function(event) {\n    event.preventDefault();\n    const city = document.getElementById('cityInput').value;\n    fetchWeather(city);\n});\n\ndocument.querySelectorAll('input[name=\"unit\"]').forEach(radio => {\n    radio.addEventListener('change', function() {\n        const city = document.getElementById('cityInput').value;\n        if (city) {\n            fetchWeather(city);\n        }\n    });\n});\n\nfunction getSelectedUnit() {\n    return document.querySelector('input[name=\"unit\"]:checked').value;\n}\n\nfunction fetchWeather(city) {\n    const unit = getSelectedUnit();\n    const apiKey = 'f1a7f601f87c9d97579ef8237cc83ff1';\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${unit}`;\n\n    fetch(apiUrl)\n    .then(response => response.json())\n    .then(data => {\n        const forecast = data.list.reduce((acc, item) => {\n            const date = item.dt_txt.split(' ')[0];\n            if (!acc[date]) {\n                acc[date] = [];\n            }\n            acc[date].push(item);\n            return acc;\n        }, {});\n\n        displayForecast(forecast);\n        prepareChartData(forecast);\n    })\n    .catch(error => {\n        console.error('Error fetching data:', error);\n    });\n}\n\nfunction displayForecast(forecast) {\n    const forecastContainer = document.getElementById('forecast');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    forecastContainer.innerHTML = '';\n\n    for (const date in forecast) {\n        const dayForecast = forecast[date];\n        const minTemp = Math.min(...dayForecast.map(item => item.main.temp_min));\n        const maxTemp = Math.max(...dayForecast.map(item => item.main.temp_max));\n        const dayElement = document.createElement('div');\n        dayElement.classList.add('day');\n        const iconUrl = `https://openweathermap.org/img/w/${dayForecast[0].weather[0].icon}.png`;\n        dayElement.innerHTML = `\n            <div>${new Date(dayForecast[0].dt * 1000).toDateString()}</div>\n            <img src=\"${iconUrl}\" alt=\"${dayForecast[0].weather[0].description}\">\n            <div>Min Temp: ${minTemp}${unitSymbol}</div>\n            <div>Max Temp: ${maxTemp}${unitSymbol}</div>\n        `;\n        dayElement.addEventListener('click', function() {\n            displayWeatherInfo(dayForecast);\n        });\n        forecastContainer.appendChild(dayElement);\n    }\n}\n\nfunction displayWeatherInfo(weatherData) {\n    const weatherInfoContainer = document.getElementById('weatherInfo');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    weatherInfoContainer.innerHTML = '';\n\n    weatherData.forEach(item => {\n        const weatherElement = document.createElement('div');\n          weatherElement.classList.add('weather-element');\n        const time = new Date(item.dt * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        const temperature = item.main.temp;\n        const description = item.weather[0].description;\n        const clouds = item.clouds.all;\n        const windSpeed = item.wind.speed;\n        const visibility = item.visibility / 1000; // Convert visibility to kilometers\n        const iconUrl = `https://openweathermap.org/img/w/${item.weather[0].icon}.png`;\n\n        weatherElement.innerHTML = `\n           <div class=\"weather-time\">${time}</div>\n            <img class=\"weather-icon\" src=\"${iconUrl}\" alt=\"${description}\">\n            <div class=\"weather-temp\">Temperature: ${temperature}${unitSymbol}</div>\n            <div class=\"weather-desc\">Description: ${description}</div>\n            <div class=\"weather-clouds\">Clouds: ${clouds}% <img class=\"icon\" src=\"cloud-icon.png\" alt=\"Clouds\"></div>\n            <div class=\"weather-wind\">Wind Speed: ${windSpeed} m/s <img class=\"icon\" src=\"wind-icon.png\" alt=\"Wind\"></div>\n            <div class=\"weather-visibility\">Visibility: ${visibility} km <img class=\"icon\" src=\"visibility-icon.png\" alt=\"Visibility\"></div>\n        `;\n        weatherInfoContainer.appendChild(weatherElement);\n    });\n\n    weatherInfoContainer.classList.remove('hide');\n}\n\nfunction prepareChartData(forecast) {\n    const labels = Object.keys(forecast);\n    const temperatures = [];\n    const humidities = [];\n    const windSpeeds = [];\n    const pressures = [];\n\n    for (const date in forecast) {\n        const dayForecast = forecast[date];\n        const avgTemp = dayForecast.reduce((sum, item) => sum + item.main.temp, 0) / dayForecast.length;\n        const avgHumidity = dayForecast.reduce((sum, item) => sum + item.main.humidity, 0) / dayForecast.length;\n        const avgWindSpeed = dayForecast.reduce((sum, item) => sum + item.wind.speed, 0) / dayForecast.length;\n        const avgPressure = dayForecast.reduce((sum, item) => sum + item.main.pressure, 0) / dayForecast.length;\n        \n        temperatures.push(avgTemp);\n        humidities.push(avgHumidity);\n        windSpeeds.push(avgWindSpeed);\n        pressures.push(avgPressure);\n    }\n\n    displayChart(labels, temperatures, humidities, windSpeeds, pressures);\n}\n\nfunction displayChart(labels, temperatures, humidities, windSpeeds, pressures) {\n    const ctx = document.getElementById('weatherChart').getContext('2d');\n    const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Temperature (°C)',\n                    data: temperatures,\n                    borderColor: 'orange',\n                    fill: false\n                },\n                {\n                    label: 'Humidity (%)',\n                    data: humidities,\n                    borderColor: 'blue',\n                    fill: false\n                },\n                {\n                    label: 'Wind Speed (m/s)',\n                    data: windSpeeds,\n                    borderColor: 'black',\n                    fill: false\n                },\n                {\n                    label: 'Pressure (hPa)',\n                    data: pressures,\n                    borderColor: 'green',\n                    fill: false\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                x: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Date'\n                    }\n                },\n                y: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Value'\n                    }\n                }\n            }\n        }\n    });\n}\n\ndocument.getElementById('showGraphBtn').addEventListener('click', function() {\n    const chartElement = document.getElementById('weatherChart');\n    chartElement.style.display = 'block';\n});\n\n/// Buttons /////\n\n\ndocument.getElementById('fWeather').addEventListener('click', function(){\n    document.getElementById('cWeather').style.display = 'none';\n    document.getElementById('cDate').style.display = 'none';\n    document.getElementById('fDWeather').style.display = 'block';\n    \n} )\n\ndocument.getElementById('tWeather').addEventListener('click', function(){\n    document.getElementById('cWeather').style.display = 'block';\n    document.getElementById('cDate').style.display = 'block';\n    document.getElementById('fDWeather').style.display = 'none';\n} )"],"names":["_arrayLikeToArray","arr","len","getSelectedUnit","document","querySelector","value","fetchWeather","city","unit","apiUrl","concat","fetch","then","response","json","data","forecast","list","reduce","acc","item","date","dt_txt","split","push","displayForecast","prepareChartData","catch","error","console","_Math","_Math1","dayForecast","minTemp","Math","min","apply","_toConsumableArray","map","main","temp_min","maxTemp","max","temp_max","dayElement","createElement","classList","add","iconUrl","weather","icon","innerHTML","Date","dt","toDateString","description","unitSymbol","addEventListener","displayWeatherInfo","forecastContainer","appendChild","getElementById","_loop","weatherData","weatherInfoContainer","forEach","weatherElement","time","toLocaleTimeString","hour","minute","temperature","temp","clouds","all","windSpeed","wind","speed","visibility","remove","labels","Object","keys","temperatures","humidities","windSpeeds","pressures","avgTemp","sum","length","avgHumidity","humidity","avgWindSpeed","avgPressure","pressure","displayChart","ctx","getContext","Chart","type","datasets","label","borderColor","fill","options","responsive","scales","x","display","title","text","y","event","preventDefault","querySelectorAll","radio","style"],"version":3,"file":"index.fb7cddc8.js.map"}