{"mappings":"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","sources":["<anon>","src/index.js","src/js/moreInfo.js","src/js/apiService.js","src/config.json","src/js/chart.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const apiKey = \"31328a08c8eed36865b9c197e848a2e0\";\n    const apiUrl = \"https://api.openweathermap.org/data/2.5/weather?&units=metric&q=\";\n    const searchBox = document.querySelector(\".search input\");\n    const searchBtn = document.querySelector(\".search button\");\n    const weatherIcon = document.querySelector(\".weather-icon\");\n    async function checkWeather(city) {\n        try {\n            const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n            if (!response.ok) throw new Error(\"City not found\");\n            const data = await response.json();\n            console.log(data);\n            document.querySelector(\".city\").innerHTML = data.name;\n            document.querySelector(\".temp\").innerHTML = Math.round(data.main.temp) + \"\\xb0C\";\n            document.querySelector(\".min-temp\").innerHTML = Math.round(data.main.temp_min) + \"\\xb0\";\n            document.querySelector(\".max-temp\").innerHTML = Math.round(data.main.temp_max) + \"\\xb0\";\n            switch(data.weather[0].main){\n                case \"Clouds\":\n                    weatherIcon.src = \"images/clouds.png\";\n                    break;\n                case \"Clear\":\n                    weatherIcon.src = \"images/clear.png\";\n                    break;\n                case \"Rain\":\n                    weatherIcon.src = \"images/rain.png\";\n                    break;\n                case \"Drizzle\":\n                    weatherIcon.src = \"images/drizzle.png\";\n                    break;\n                case \"Mist\":\n                    weatherIcon.src = \"images/mist.png\";\n                    break;\n                default:\n                    weatherIcon.src = \"\"; // Default image or leave it empty\n            }\n        } catch (error) {\n            console.error(\"Error fetching weather data:\", error);\n            alert(\"Could not retrieve weather data. Please try again.\");\n        }\n    }\n    if (searchBtn && searchBox) searchBtn.addEventListener(\"click\", ()=>{\n        checkWeather(searchBox.value);\n    });\n    else console.error(\"Search button or search input not found\");\n});\n\n\nvar $0aea251f5ddb0249$exports = {};\n$0aea251f5ddb0249$exports = JSON.parse('{\"url\":\"https://api.openweathermap.org/data/2.5/\",\"apiKey\":\"1328a08c8eed36865b9c197e848a2e0\",\"units\":\"metric\",\"metric\":\"celsius\"}');\n\n\nclass $39fdaa249e5f8beb$var$ApiService {\n    constructor(){\n        this.requestUrl = (0, (/*@__PURE__*/$parcel$interopDefault($0aea251f5ddb0249$exports))).url;\n        this.key = (0, (/*@__PURE__*/$parcel$interopDefault($0aea251f5ddb0249$exports))).apiKey;\n        this.bgIconUrl = (0, (/*@__PURE__*/$parcel$interopDefault($0aea251f5ddb0249$exports))).bgIconUrl;\n        this.bgKeyImg = (0, (/*@__PURE__*/$parcel$interopDefault($0aea251f5ddb0249$exports))).bgKeyImg;\n        this.units = (0, (/*@__PURE__*/$parcel$interopDefault($0aea251f5ddb0249$exports))).units;\n        this.metric = (0, (/*@__PURE__*/$parcel$interopDefault($0aea251f5ddb0249$exports))).metric;\n        this.searchQuery = \"\";\n        this.location = \"Kiev\";\n    }\n    // ************************** Делаем запрос на сервер\n    // ***** Метод принимает параметр collection - это weather (данные за 1 день) или forecast (данные за 5 дней)\n    // позволяет получать данные на 1 или 5 дней в зависимости от параметра\n    getData(collection) {\n        const url = `${this.requestUrl}${collection}?q=${this.location}&units=${this.units}&appid=${this.key}`;\n        return fetch(url).then((res)=>{\n            if (res.ok) return res.json();\n            return Promise.reject(\"Something went wrong\");\n        });\n    }\n    // ***** Метод получения изображений с pixabay\n    fetchImages() {\n        const bgUrlIcon = `${this.bgIconUrl}${this.location}&page=1&per_page=12&key=${this.bgKeyImg}`;\n        return fetch(bgUrlIcon).then((res)=>{\n            if (res.ok) return res.json();\n            return Promise.reject(\"Picture not found\");\n        });\n    }\n    // ***** Сеттер получения текущей локации после нажатия на Сабмит или Enter\n    set query(newLocation) {\n        this.location = newLocation;\n    }\n}\nconst $39fdaa249e5f8beb$var$apiService = new $39fdaa249e5f8beb$var$ApiService({});\nvar $39fdaa249e5f8beb$export$2e2bcd8739ae039 = $39fdaa249e5f8beb$var$apiService;\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Event listener for form submission\n    const searchForm = document.getElementById(\"searchForm\");\n    if (searchForm) searchForm.addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n        const city = document.getElementById(\"cityInput\").value;\n        if (city) fetchWeather(city);\n    });\n    // Event listeners for unit change\n    document.querySelectorAll('input[name=\"unit\"]').forEach((radio)=>{\n        radio.addEventListener(\"change\", function() {\n            const city = document.getElementById(\"cityInput\").value;\n            if (city) fetchWeather(city);\n        });\n    });\n    // Function to get selected unit\n    function getSelectedUnit() {\n        const unit = document.querySelector('input[name=\"unit\"]:checked');\n        return unit ? unit.value : \"metric\"; // Default to metric if no unit is selected\n    }\n    // Function to fetch weather data\n    async function fetchWeather(city) {\n        const unit = getSelectedUnit();\n        const apiKey = \"f1a7f601f87c9d97579ef8237cc83ff1\";\n        const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${unit}`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) throw new Error(\"City not found\");\n            const data = await response.json();\n            const forecast = data.list.reduce((acc, item)=>{\n                const date = item.dt_txt.split(\" \")[0];\n                if (!acc[date]) acc[date] = [];\n                acc[date].push(item);\n                return acc;\n            }, {});\n            displayForecast(forecast);\n            prepareChartData(forecast);\n        } catch (error) {\n            console.error(\"Error fetching data:\", error);\n            alert(\"Could not retrieve weather data. Please try again.\");\n        }\n    }\n    // Function to display forecast\n    function displayForecast(forecast) {\n        const forecastContainer = document.getElementById(\"forecast\");\n        const unit = getSelectedUnit();\n        const unitSymbol = unit === \"metric\" ? \"\\xb0C\" : \"\\xb0F\";\n        forecastContainer.innerHTML = \"\";\n        for(const date in forecast){\n            const dayForecast = forecast[date];\n            const minTemp = Math.min(...dayForecast.map((item)=>item.main.temp_min));\n            const maxTemp = Math.max(...dayForecast.map((item)=>item.main.temp_max));\n            const dayElement = document.createElement(\"div\");\n            dayElement.classList.add(\"day\");\n            const iconUrl = `https://openweathermap.org/img/w/${dayForecast[0].weather[0].icon}.png`;\n            dayElement.innerHTML = `\n                <div>${new Date(dayForecast[0].dt * 1000).toDateString()}</div>\n                <img src=\"${iconUrl}\" alt=\"${dayForecast[0].weather[0].description}\">\n                <div>Min Temp: ${minTemp}${unitSymbol}</div>\n                <div>Max Temp: ${maxTemp}${unitSymbol}</div>\n            `;\n            dayElement.addEventListener(\"click\", function() {\n                displayWeatherInfo(dayForecast);\n            });\n            forecastContainer.appendChild(dayElement);\n        }\n    }\n    // Function to display detailed weather info\n    function displayWeatherInfo(weatherData) {\n        const weatherInfoContainer = document.getElementById(\"weatherInfo\");\n        const unit = getSelectedUnit();\n        const unitSymbol = unit === \"metric\" ? \"\\xb0C\" : \"\\xb0F\";\n        weatherInfoContainer.innerHTML = \"\";\n        weatherData.forEach((item)=>{\n            const weatherElement = document.createElement(\"div\");\n            weatherElement.classList.add(\"weather-element\");\n            const time = new Date(item.dt * 1000).toLocaleTimeString([], {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n            });\n            const temperature = item.main.temp;\n            const description = item.weather[0].description;\n            const clouds = item.clouds.all;\n            const windSpeed = item.wind.speed;\n            const visibility = item.visibility / 1000; // Convert visibility to kilometers\n            const iconUrl = `https://openweathermap.org/img/w/${item.weather[0].icon}.png`;\n            weatherElement.innerHTML = `\n                <div class=\"weather-time\">${time}</div>\n                <img class=\"weather-icon\" src=\"${iconUrl}\" alt=\"${description}\">\n                <div class=\"weather-temp\">Temperature: ${temperature}${unitSymbol}</div>\n                <div class=\"weather-desc\">Description: ${description}</div>\n                <div class=\"weather-clouds\">Clouds: ${clouds}% <img class=\"icon\" src=\"cloud-icon.png\" alt=\"Clouds\"></div>\n                <div class=\"weather-wind\">Wind Speed: ${windSpeed} m/s <img class=\"icon\" src=\"wind-icon.png\" alt=\"Wind\"></div>\n                <div class=\"weather-visibility\">Visibility: ${visibility} km <img class=\"icon\" src=\"visibility-icon.png\" alt=\"Visibility\"></div>\n            `;\n            weatherInfoContainer.appendChild(weatherElement);\n        });\n        weatherInfoContainer.classList.remove(\"hide\");\n    }\n    // Function to prepare chart data\n    function prepareChartData(forecast) {\n        const labels = Object.keys(forecast);\n        const temperatures = [];\n        const humidities = [];\n        const windSpeeds = [];\n        const pressures = [];\n        for(const date in forecast){\n            const dayForecast = forecast[date];\n            const avgTemp = dayForecast.reduce((sum, item)=>sum + item.main.temp, 0) / dayForecast.length;\n            const avgHumidity = dayForecast.reduce((sum, item)=>sum + item.main.humidity, 0) / dayForecast.length;\n            const avgWindSpeed = dayForecast.reduce((sum, item)=>sum + item.wind.speed, 0) / dayForecast.length;\n            const avgPressure = dayForecast.reduce((sum, item)=>sum + item.main.pressure, 0) / dayForecast.length;\n            temperatures.push(avgTemp);\n            humidities.push(avgHumidity);\n            windSpeeds.push(avgWindSpeed);\n            pressures.push(avgPressure);\n        }\n        displayChart(labels, temperatures, humidities, windSpeeds, pressures);\n    }\n    // Function to display chart\n    function displayChart(labels, temperatures, humidities, windSpeeds, pressures) {\n        const ctx = document.getElementById(\"weatherChart\").getContext(\"2d\");\n        const chart = new Chart(ctx, {\n            type: \"line\",\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: \"Temperature (\\xb0C)\",\n                        data: temperatures,\n                        borderColor: \"orange\",\n                        fill: false\n                    },\n                    {\n                        label: \"Humidity (%)\",\n                        data: humidities,\n                        borderColor: \"blue\",\n                        fill: false\n                    },\n                    {\n                        label: \"Wind Speed (m/s)\",\n                        data: windSpeeds,\n                        borderColor: \"black\",\n                        fill: false\n                    },\n                    {\n                        label: \"Pressure (hPa)\",\n                        data: pressures,\n                        borderColor: \"green\",\n                        fill: false\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    x: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: \"Date\"\n                        }\n                    },\n                    y: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: \"Value\"\n                        }\n                    }\n                }\n            }\n        });\n    }\n    // Toggle between weather views\n    document.getElementById(\"fWeather\").addEventListener(\"click\", function() {\n        document.getElementById(\"cWeather\").style.display = \"none\";\n        document.getElementById(\"cDate\").style.display = \"none\";\n        document.getElementById(\"fDWeather\").style.display = \"block\";\n    });\n    document.getElementById(\"tWeather\").addEventListener(\"click\", function() {\n        document.getElementById(\"cWeather\").style.display = \"block\";\n        document.getElementById(\"cDate\").style.display = \"block\";\n        document.getElementById(\"fDWeather\").style.display = \"none\";\n    });\n    // Show and hide graph\n    document.getElementById(\"showGraphBtn\").addEventListener(\"click\", function() {\n        document.getElementById(\"fDChart\").hidden = false;\n        document.getElementById(\"weatherChart\").style.display = \"block\";\n        document.getElementById(\"showGraphBtn\").style.display = \"none\";\n        document.getElementById(\"hideGraphBtn\").style.display = \"block\";\n    });\n    document.getElementById(\"hideGraphBtn\").addEventListener(\"click\", function() {\n        document.getElementById(\"fDChart\").hidden = true;\n        document.getElementById(\"weatherChart\").style.display = \"none\";\n        document.getElementById(\"showGraphBtn\").style.display = \"block\";\n        document.getElementById(\"hideGraphBtn\").style.display = \"none\";\n    });\n});\n\n\n\n})();\n//# sourceMappingURL=index.d6ba1ac8.js.map\n","import './js/moreInfo';\nimport './js/apiService';\nimport './js/chart';","document.addEventListener('DOMContentLoaded', function () {\n    const apiKey = \"31328a08c8eed36865b9c197e848a2e0\";\n    const apiUrl = \"https://api.openweathermap.org/data/2.5/weather?&units=metric&q=\";\n  \n    const searchBox = document.querySelector(\".search input\");\n    const searchBtn = document.querySelector(\".search button\");\n    const weatherIcon = document.querySelector(\".weather-icon\");\n  \n    async function checkWeather(city) {\n      try {\n        const response = await fetch(apiUrl + city + `&appid=${apiKey}`);\n        if (!response.ok) {\n          throw new Error('City not found');\n        }\n        const data = await response.json();\n  \n        console.log(data);\n  \n        document.querySelector(\".city\").innerHTML = data.name;\n        document.querySelector(\".temp\").innerHTML = Math.round(data.main.temp) + \"°C\";\n        document.querySelector(\".min-temp\").innerHTML = Math.round(data.main.temp_min) + \"°\";\n        document.querySelector(\".max-temp\").innerHTML = Math.round(data.main.temp_max) + \"°\";\n  \n        switch (data.weather[0].main) {\n          case \"Clouds\":\n            weatherIcon.src = \"images/clouds.png\";\n            break;\n          case \"Clear\":\n            weatherIcon.src = \"images/clear.png\";\n            break;\n          case \"Rain\":\n            weatherIcon.src = \"images/rain.png\";\n            break;\n          case \"Drizzle\":\n            weatherIcon.src = \"images/drizzle.png\";\n            break;\n          case \"Mist\":\n            weatherIcon.src = \"images/mist.png\";\n            break;\n          default:\n            weatherIcon.src = \"\"; // Default image or leave it empty\n        }\n      } catch (error) {\n        console.error('Error fetching weather data:', error);\n        alert('Could not retrieve weather data. Please try again.');\n      }\n    }\n  \n    if (searchBtn && searchBox) {\n      searchBtn.addEventListener(\"click\", () => {\n        checkWeather(searchBox.value);\n      });\n    } else {\n      console.error('Search button or search input not found');\n    }\n  });\n  ","import config from '../config.json';\n\nclass ApiService {\n  constructor() {\n    this.requestUrl = config.url;\n    this.key = config.apiKey;\n    this.bgIconUrl = config.bgIconUrl;\n    this.bgKeyImg = config.bgKeyImg;\n    this.units = config.units;\n    this.metric = config.metric;\n    this.searchQuery = '';\n    this.location = 'Kiev';\n  }\n\n  // ************************** Делаем запрос на сервер\n  // ***** Метод принимает параметр collection - это weather (данные за 1 день) или forecast (данные за 5 дней)\n  // позволяет получать данные на 1 или 5 дней в зависимости от параметра\n\n  getData(collection) {\n    const url = `${this.requestUrl}${collection}?q=${this.location}&units=${this.units}&appid=${this.key}`;\n\n    return fetch(url).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject('Something went wrong');\n    });\n  }\n\n  // ***** Метод получения изображений с pixabay\n\n  fetchImages() {\n    const bgUrlIcon = `${this.bgIconUrl}${this.location}&page=1&per_page=12&key=${this.bgKeyImg}`;\n\n    return fetch(bgUrlIcon).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject('Picture not found');\n    });\n  }\n\n  // ***** Сеттер получения текущей локации после нажатия на Сабмит или Enter\n  set query(newLocation) {\n    this.location = newLocation;\n  }\n}\n\nconst apiService = new ApiService({});\n\nexport default apiService;","{\n    \"url\": \"https://api.openweathermap.org/data/2.5/\",\n    \"apiKey\": \"1328a08c8eed36865b9c197e848a2e0\",\n    \"units\": \"metric\",\n    \"metric\": \"celsius\"\n}","document.addEventListener('DOMContentLoaded', function () {\n    // Event listener for form submission\n    const searchForm = document.getElementById('searchForm');\n    if (searchForm) {\n        searchForm.addEventListener('submit', function (event) {\n            event.preventDefault();\n            const city = document.getElementById('cityInput').value;\n            if (city) {\n                fetchWeather(city);\n            }\n        });\n    }\n\n    // Event listeners for unit change\n    document.querySelectorAll('input[name=\"unit\"]').forEach(radio => {\n        radio.addEventListener('change', function () {\n            const city = document.getElementById('cityInput').value;\n            if (city) {\n                fetchWeather(city);\n            }\n        });\n    });\n\n    // Function to get selected unit\n    function getSelectedUnit() {\n        const unit = document.querySelector('input[name=\"unit\"]:checked');\n        return unit ? unit.value : 'metric'; // Default to metric if no unit is selected\n    }\n\n    // Function to fetch weather data\n    async function fetchWeather(city) {\n        const unit = getSelectedUnit();\n        const apiKey = 'f1a7f601f87c9d97579ef8237cc83ff1';\n        const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${unit}`;\n\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error('City not found');\n            }\n            const data = await response.json();\n\n            const forecast = data.list.reduce((acc, item) => {\n                const date = item.dt_txt.split(' ')[0];\n                if (!acc[date]) {\n                    acc[date] = [];\n                }\n                acc[date].push(item);\n                return acc;\n            }, {});\n\n            displayForecast(forecast);\n            prepareChartData(forecast);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            alert('Could not retrieve weather data. Please try again.');\n        }\n    }\n\n    // Function to display forecast\n    function displayForecast(forecast) {\n        const forecastContainer = document.getElementById('forecast');\n        const unit = getSelectedUnit();\n        const unitSymbol = unit === 'metric' ? '°C' : '°F';\n        forecastContainer.innerHTML = '';\n\n        for (const date in forecast) {\n            const dayForecast = forecast[date];\n            const minTemp = Math.min(...dayForecast.map(item => item.main.temp_min));\n            const maxTemp = Math.max(...dayForecast.map(item => item.main.temp_max));\n            const dayElement = document.createElement('div');\n            dayElement.classList.add('day');\n            const iconUrl = `https://openweathermap.org/img/w/${dayForecast[0].weather[0].icon}.png`;\n            dayElement.innerHTML = `\n                <div>${new Date(dayForecast[0].dt * 1000).toDateString()}</div>\n                <img src=\"${iconUrl}\" alt=\"${dayForecast[0].weather[0].description}\">\n                <div>Min Temp: ${minTemp}${unitSymbol}</div>\n                <div>Max Temp: ${maxTemp}${unitSymbol}</div>\n            `;\n            dayElement.addEventListener('click', function () {\n                displayWeatherInfo(dayForecast);\n            });\n            forecastContainer.appendChild(dayElement);\n        }\n    }\n\n    // Function to display detailed weather info\n    function displayWeatherInfo(weatherData) {\n        const weatherInfoContainer = document.getElementById('weatherInfo');\n        const unit = getSelectedUnit();\n        const unitSymbol = unit === 'metric' ? '°C' : '°F';\n        weatherInfoContainer.innerHTML = '';\n\n        weatherData.forEach(item => {\n            const weatherElement = document.createElement('div');\n            weatherElement.classList.add('weather-element');\n            const time = new Date(item.dt * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n            const temperature = item.main.temp;\n            const description = item.weather[0].description;\n            const clouds = item.clouds.all;\n            const windSpeed = item.wind.speed;\n            const visibility = item.visibility / 1000; // Convert visibility to kilometers\n            const iconUrl = `https://openweathermap.org/img/w/${item.weather[0].icon}.png`;\n\n            weatherElement.innerHTML = `\n                <div class=\"weather-time\">${time}</div>\n                <img class=\"weather-icon\" src=\"${iconUrl}\" alt=\"${description}\">\n                <div class=\"weather-temp\">Temperature: ${temperature}${unitSymbol}</div>\n                <div class=\"weather-desc\">Description: ${description}</div>\n                <div class=\"weather-clouds\">Clouds: ${clouds}% <img class=\"icon\" src=\"cloud-icon.png\" alt=\"Clouds\"></div>\n                <div class=\"weather-wind\">Wind Speed: ${windSpeed} m/s <img class=\"icon\" src=\"wind-icon.png\" alt=\"Wind\"></div>\n                <div class=\"weather-visibility\">Visibility: ${visibility} km <img class=\"icon\" src=\"visibility-icon.png\" alt=\"Visibility\"></div>\n            `;\n            weatherInfoContainer.appendChild(weatherElement);\n        });\n\n        weatherInfoContainer.classList.remove('hide');\n    }\n\n    // Function to prepare chart data\n    function prepareChartData(forecast) {\n        const labels = Object.keys(forecast);\n        const temperatures = [];\n        const humidities = [];\n        const windSpeeds = [];\n        const pressures = [];\n\n        for (const date in forecast) {\n            const dayForecast = forecast[date];\n            const avgTemp = dayForecast.reduce((sum, item) => sum + item.main.temp, 0) / dayForecast.length;\n            const avgHumidity = dayForecast.reduce((sum, item) => sum + item.main.humidity, 0) / dayForecast.length;\n            const avgWindSpeed = dayForecast.reduce((sum, item) => sum + item.wind.speed, 0) / dayForecast.length;\n            const avgPressure = dayForecast.reduce((sum, item) => sum + item.main.pressure, 0) / dayForecast.length;\n\n            temperatures.push(avgTemp);\n            humidities.push(avgHumidity);\n            windSpeeds.push(avgWindSpeed);\n            pressures.push(avgPressure);\n        }\n\n        displayChart(labels, temperatures, humidities, windSpeeds, pressures);\n    }\n\n    // Function to display chart\n    function displayChart(labels, temperatures, humidities, windSpeeds, pressures) {\n        const ctx = document.getElementById('weatherChart').getContext('2d');\n        const chart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: 'Temperature (°C)',\n                        data: temperatures,\n                        borderColor: 'orange',\n                        fill: false\n                    },\n                    {\n                        label: 'Humidity (%)',\n                        data: humidities,\n                        borderColor: 'blue',\n                        fill: false\n                    },\n                    {\n                        label: 'Wind Speed (m/s)',\n                        data: windSpeeds,\n                        borderColor: 'black',\n                        fill: false\n                    },\n                    {\n                        label: 'Pressure (hPa)',\n                        data: pressures,\n                        borderColor: 'green',\n                        fill: false\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    x: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: 'Date'\n                        }\n                    },\n                    y: {\n                        display: true,\n                        title: {\n                            display: true,\n                            text: 'Value'\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Toggle between weather views\n    document.getElementById('fWeather').addEventListener('click', function () {\n        document.getElementById('cWeather').style.display = 'none';\n        document.getElementById('cDate').style.display = 'none';\n        document.getElementById('fDWeather').style.display = 'block';\n    });\n\n    document.getElementById('tWeather').addEventListener('click', function () {\n        document.getElementById('cWeather').style.display = 'block';\n        document.getElementById('cDate').style.display = 'block';\n        document.getElementById('fDWeather').style.display = 'none';\n    });\n\n    // Show and hide graph\n    document.getElementById('showGraphBtn').addEventListener('click', function () {\n        document.getElementById('fDChart').hidden = false;\n        document.getElementById('weatherChart').style.display = 'block';\n        document.getElementById('showGraphBtn').style.display = 'none';\n        document.getElementById('hideGraphBtn').style.display = 'block';\n    });\n\n    document.getElementById('hideGraphBtn').addEventListener('click', function () {\n        document.getElementById('fDChart').hidden = true;\n        document.getElementById('weatherChart').style.display = 'none';\n        document.getElementById('showGraphBtn').style.display = 'block';\n        document.getElementById('hideGraphBtn').style.display = 'none';\n    });\n});\n"],"names":["$parcel$interopDefault","a","__esModule","default","document","addEventListener","searchBox","querySelector","searchBtn","weatherIcon","checkWeather","city","response","fetch","apiUrl","ok","Error","data","json","console","log","innerHTML","name","Math","round","main","temp","temp_min","temp_max","weather","src","error","alert","value","$0aea251f5ddb0249$exports","JSON","parse","constructor","requestUrl","url","key","apiKey","bgIconUrl","bgKeyImg","units","metric","searchQuery","location","getData","collection","then","res","Promise","reject","fetchImages","query","newLocation","searchForm","getElementById","getSelectedUnit","unit","fetchWeather","forecast","list","reduce","acc","item","date","dt_txt","split","push","displayForecast","forecastContainer","unitSymbol","dayForecast","minTemp","min","map","maxTemp","max","dayElement","createElement","classList","add","iconUrl","icon","Date","dt","toDateString","description","displayWeatherInfo","weatherData","weatherInfoContainer","forEach","weatherElement","time","toLocaleTimeString","hour","minute","temperature","clouds","all","windSpeed","wind","speed","visibility","appendChild","remove","prepareChartData","labels","Object","keys","temperatures","humidities","windSpeeds","pressures","avgTemp","sum","length","avgHumidity","humidity","avgWindSpeed","avgPressure","pressure","Chart","getContext","type","datasets","label","borderColor","fill","options","responsive","scales","x","display","title","text","y","event","preventDefault","querySelectorAll","radio","style","hidden"],"version":3,"file":"index.d6ba1ac8.js.map"}