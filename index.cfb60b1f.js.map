{"mappings":"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","sources":["src/quote.js"],"sourcesContent":["const quotes = [\n    { text: \"So divinely is the world organized that every one of us, in our place and time, is in balance with everything else.\", author: \"Johann Wolfgang Von Goethe\" },\n    { text: \"Life isn't about finding yourself. Life is about creating yourself.\", author: \"George Bernard Shaw\" },\n    { text: \"The only way to do great work is to love what you do.\", author: \"Steve Jobs\" },\n    { text: \"The best way to predict the future is to create it.\", author: \"Peter Drucker\" },\n    { text: \"You miss 100% of the shots you don’t take.\", author: \"Wayne Gretzky\" },\n    { text: \"Do not watch the clock. Do what it does. Keep going.\", author: \"Sam Levenson\" },\n    { text: \"Success is not the key to happiness. Happiness is the key to success.\", author: \"Albert Schweitzer\" },\n    // Add more quotes as needed\n];\n\n\nfunction getRandomQuote() {\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    return quotes[randomIndex];\n}\n\n\nfunction displayRandomQuote() {\n    const quote = getRandomQuote();\n    const quoteTextElement = document.querySelector('.quote-text');\n    const quoteAuthorElement = document.querySelector('.quote-author');\n\n    quoteTextElement.textContent = quote.text;\n    quoteAuthorElement.textContent = `- ${quote.author}`;\n}\n\n\ndocument.addEventListener('DOMContentLoaded', displayRandomQuote);\n\ndocument.getElementById('searchForm').addEventListener('submit', function(event) {\n    event.preventDefault();\n    const city = document.getElementById('cityInput').value;\n    fetchWeather(city);\n});\n\ndocument.querySelectorAll('input[name=\"unit\"]').forEach(radio => {\n    radio.addEventListener('change', function() {\n        const city = document.getElementById('cityInput').value;\n        if (city) {\n            fetchWeather(city);\n        }\n    });\n});\n\nfunction getSelectedUnit() {\n    return document.querySelector('input[name=\"unit\"]:checked').value;\n}\n\nfunction fetchWeather(city) {\n    const unit = getSelectedUnit();\n    const apiKey = 'f1a7f601f87c9d97579ef8237cc83ff1';\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${unit}`;\n\n    fetch(apiUrl)\n    .then(response => response.json())\n    .then(data => {\n        const forecast = data.list.reduce((acc, item) => {\n            const date = item.dt_txt.split(' ')[0];\n            if (!acc[date]) {\n                acc[date] = [];\n            }\n            acc[date].push(item);\n            return acc;\n        }, {});\n\n        displayForecast(forecast);\n        prepareChartData(forecast);\n        displayRandomQuote(); // Call this function to change the quote\n    })\n    .catch(error => {\n        console.error('Error fetching data:', error);\n    });\n}\n\nfunction displayForecast(forecast) {\n    const forecastContainer = document.getElementById('forecast');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    forecastContainer.innerHTML = '';\n\n    for (const date in forecast) {\n        const dayForecast = forecast[date];\n        const minTemp = Math.min(...dayForecast.map(item => item.main.temp_min));\n        const maxTemp = Math.max(...dayForecast.map(item => item.main.temp_max));\n        const dayElement = document.createElement('div');\n        dayElement.classList.add('day');\n        const iconUrl = `https://openweathermap.org/img/w/${dayForecast[0].weather[0].icon}.png`;\n        dayElement.innerHTML = `\n            <div>${new Date(dayForecast[0].dt * 1000).toDateString()}</div>\n            <img src=\"${iconUrl}\" alt=\"${dayForecast[0].weather[0].description}\">\n            <div>Min Temp: ${minTemp}${unitSymbol}</div>\n            <div>Max Temp: ${maxTemp}${unitSymbol}</div>\n        `;\n        dayElement.addEventListener('click', function() {\n            displayWeatherInfo(dayForecast);\n        });\n        forecastContainer.appendChild(dayElement);\n    }\n}\n\nfunction displayWeatherInfo(weatherData) {\n    const weatherInfoContainer = document.getElementById('weatherInfo');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    weatherInfoContainer.innerHTML = '';\n\n    weatherData.forEach(item => {\n        const weatherElement = document.createElement('div');\n        const time = new Date(item.dt * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        const temperature = item.main.temp;\n        const description = item.weather[0].description;\n        const clouds = item.clouds.all;\n        const windSpeed = item.wind.speed;\n        const visibility = item.visibility / 1000; // Convert visibility to kilometers\n        const iconUrl = `https://openweathermap.org/img/w/${item.weather[0].icon}.png`;\n\n        weatherElement.innerHTML = `\n            <div>${time}</div>\n            <img src=\"${iconUrl}\" alt=\"${description}\">\n            <div>Temperature: ${temperature}${unitSymbol}</div>\n            <div>Description: ${description}</div>\n            <div>Clouds: ${clouds}% <img src=\"cloud-icon.png\" alt=\"Clouds\"></div>\n            <div>Wind Speed: ${windSpeed} m/s <img src=\"wind-icon.png\" alt=\"Wind\"></div>\n            <div>Visibility: ${visibility} km <img src=\"visibility-icon.png\" alt=\"Visibility\"></div>\n        `;\n        weatherInfoContainer.appendChild(weatherElement);\n    });\n\n    weatherInfoContainer.classList.remove('hide');\n}\n\nfunction prepareChartData(forecast) {\n    const labels = Object.keys(forecast);\n    const temperatures = [];\n    const humidities = [];\n    const windSpeeds = [];\n    const pressures = [];\n\n    for (const date in forecast) {\n        const dayForecast = forecast[date];\n        const avgTemp = dayForecast.reduce((sum, item) => sum + item.main.temp, 0) / dayForecast.length;\n        const avgHumidity = dayForecast.reduce((sum, item) => sum + item.main.humidity, 0) / dayForecast.length;\n        const avgWindSpeed = dayForecast.reduce((sum, item) => sum + item.wind.speed, 0) / dayForecast.length;\n        const avgPressure = dayForecast.reduce((sum, item) => sum + item.main.pressure, 0) / dayForecast.length;\n        \n        temperatures.push(avgTemp);\n        humidities.push(avgHumidity);\n        windSpeeds.push(avgWindSpeed);\n        pressures.push(avgPressure);\n    }\n\n    displayChart(labels, temperatures, humidities, windSpeeds, pressures);\n}\n\nfunction displayChart(labels, temperatures, humidities, windSpeeds, pressures) {\n    const ctx = document.getElementById('weatherChart').getContext('2d');\n    const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Temperature (°C)',\n                    data: temperatures,\n                    borderColor: 'red',\n                    fill: false\n                },\n                {\n                    label: 'Humidity (%)',\n                    data: humidities,\n                    borderColor: 'blue',\n                    fill: false\n                },\n                {\n                    label: 'Wind Speed (m/s)',\n                    data: windSpeeds,\n                    borderColor: 'green',\n                    fill: false\n                },\n                {\n                    label: 'Pressure (hPa)',\n                    data: pressures,\n                    borderColor: 'purple',\n                    fill: false\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                y: {\n                    beginAtZero: true\n                }\n            }\n        }\n    });\n\n    document.getElementById('weatherChart').style.display = 'block';\n}"],"names":["_arrayLikeToArray","arr","len","quotes","text","author","getRandomQuote","randomIndex","Math","floor","random","length","displayRandomQuote","quote","quoteTextElement","document","querySelector","quoteAuthorElement","textContent","concat","getSelectedUnit","value","fetchWeather","city","unit","apiUrl","fetch","then","response","json","data","forecast","list","reduce","acc","item","date","dt_txt","split","push","displayForecast","prepareChartData","catch","error","console","_Math","_Math1","dayForecast","minTemp","min","apply","_toConsumableArray","map","main","temp_min","maxTemp","max","temp_max","dayElement","createElement","classList","add","iconUrl","weather","icon","innerHTML","Date","dt","toDateString","description","unitSymbol","addEventListener","displayWeatherInfo","forecastContainer","appendChild","getElementById","_loop","weatherData","weatherInfoContainer","forEach","weatherElement","time","toLocaleTimeString","hour","minute","temperature","temp","clouds","all","windSpeed","wind","speed","visibility","remove","labels","Object","keys","temperatures","humidities","windSpeeds","pressures","avgTemp","sum","avgHumidity","humidity","avgWindSpeed","avgPressure","pressure","displayChart","ctx","getContext","Chart","type","datasets","label","borderColor","fill","options","responsive","maintainAspectRatio","scales","y","beginAtZero","style","display","event","preventDefault","querySelectorAll","radio"],"version":3,"file":"index.cfb60b1f.js.map"}